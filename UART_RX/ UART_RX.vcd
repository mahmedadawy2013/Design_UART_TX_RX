$date
	Sat Oct 08 22:19:28 2022
$end
$version
	ModelSim Version 10.1d
$end
$timescale
	1ps
$end
$scope module UART_RX_tb $end
$var reg 1 ! RX_IN_UART_RX_tb $end
$var reg 1 " PAR_EN_UART_RX_tb $end
$var reg 4 # Prescale_UART_RX_tb [3:0] $end
$var reg 1 $ PAR_TYPE_UART_RX_tb $end
$var reg 1 % CLK_UART_RX_tb $end
$var reg 1 & RST_UART_RX_tb $end
$var wire 1 ' DATA_VALId_UART_RX_tb $end
$var wire 1 ( P_DATA_UART_RX_tb [7] $end
$var wire 1 ) P_DATA_UART_RX_tb [6] $end
$var wire 1 * P_DATA_UART_RX_tb [5] $end
$var wire 1 + P_DATA_UART_RX_tb [4] $end
$var wire 1 , P_DATA_UART_RX_tb [3] $end
$var wire 1 - P_DATA_UART_RX_tb [2] $end
$var wire 1 . P_DATA_UART_RX_tb [1] $end
$var wire 1 / P_DATA_UART_RX_tb [0] $end
$scope module DUT $end
$var parameter 32 0 prescale_Width $end
$var parameter 32 1 DATA_Width $end
$var parameter 32 2 Out_Width $end
$var wire 1 3 Prescale_UART_RX [3] $end
$var wire 1 4 Prescale_UART_RX [2] $end
$var wire 1 5 Prescale_UART_RX [1] $end
$var wire 1 6 Prescale_UART_RX [0] $end
$var wire 1 7 RX_IN_UART_RX $end
$var wire 1 8 PAR_EN_UART_RX $end
$var wire 1 9 PAR_TYPE_UART_RX $end
$var wire 1 : RST_UART_RX $end
$var wire 1 ; CLK_UART_RX $end
$var wire 1 ' DATA_VALId_UART_RX $end
$var wire 1 ( P_DATA_UART_RX [7] $end
$var wire 1 ) P_DATA_UART_RX [6] $end
$var wire 1 * P_DATA_UART_RX [5] $end
$var wire 1 + P_DATA_UART_RX [4] $end
$var wire 1 , P_DATA_UART_RX [3] $end
$var wire 1 - P_DATA_UART_RX [2] $end
$var wire 1 . P_DATA_UART_RX [1] $end
$var wire 1 / P_DATA_UART_RX [0] $end
$var wire 1 < PAR_CHK_EN_UART_RX $end
$var wire 1 = PAR_ERR_UART_RX $end
$var wire 1 > STR_CHK_EN_UART_RX $end
$var wire 1 ? STR_ERR_UART_RX $end
$var wire 1 @ STP_CHK_EN_UART_RX $end
$var wire 1 A STP_ERR_UART_RX $end
$var wire 1 B DSER_EN_UART_RX $end
$var wire 1 C SAMPLED_BIT_UART_RX $end
$var wire 1 D COUNTER_EN_UART_RX $end
$var wire 1 E BIT_CNT_UART_RX [3] $end
$var wire 1 F BIT_CNT_UART_RX [2] $end
$var wire 1 G BIT_CNT_UART_RX [1] $end
$var wire 1 H BIT_CNT_UART_RX [0] $end
$var wire 1 I EDGE_CNT_UART_RX [3] $end
$var wire 1 J EDGE_CNT_UART_RX [2] $end
$var wire 1 K EDGE_CNT_UART_RX [1] $end
$var wire 1 L EDGE_CNT_UART_RX [0] $end
$var wire 1 M DATA_SAMP_EN_UART_RX $end
$scope module FSM_UART_RX $end
$var parameter 3 N IDLE $end
$var parameter 3 O Starting $end
$var parameter 3 P Transfer $end
$var parameter 3 Q parity $end
$var parameter 3 R Ending $end
$var parameter 3 S ERR_CHECK $end
$var parameter 3 T Dat_VALID $end
$var parameter 1 U ONE $end
$var parameter 1 V ZERO $end
$var wire 1 ; CLK $end
$var wire 1 : RST $end
$var wire 1 < PAR_EN_FSM $end
$var wire 1 7 RX_IN_FSM $end
$var wire 1 ? STR_CHK_ERR_FSM $end
$var wire 1 A END_CHK_ERR_FSM $end
$var wire 1 = PAR_CHK_ERR_FSM $end
$var wire 1 E BIT_Counts_FSM [3] $end
$var wire 1 F BIT_Counts_FSM [2] $end
$var wire 1 G BIT_Counts_FSM [1] $end
$var wire 1 H BIT_Counts_FSM [0] $end
$var wire 1 I EDGE_Counts_FSM [3] $end
$var wire 1 J EDGE_Counts_FSM [2] $end
$var wire 1 K EDGE_Counts_FSM [1] $end
$var wire 1 L EDGE_Counts_FSM [0] $end
$var reg 1 W STR_CHK_EN_FSM $end
$var reg 1 X END_CHK_EN_FSM $end
$var reg 1 Y PAR_CHK_EN_FSM $end
$var reg 1 Z COUNTER_CHK_EN_FSM $end
$var reg 1 [ DATA_SAMP_EN_FSM $end
$var reg 1 \ DESER_EN_FSM $end
$var reg 1 ] Data_Valid_Fsm $end
$var reg 3 ^ current_state [2:0] $end
$var reg 3 _ next_state [2:0] $end
$upscope $end
$scope module DATA_SAMPLE_UART_RX $end
$var parameter 32 ` INPUT_WIDTH $end
$var parameter 32 a Number_Edges $end
$var parameter 1 b ONE $end
$var parameter 1 c ZERO $end
$var parameter 32 d Samp_width $end
$var wire 1 3 Pre_scale_Samp [3] $end
$var wire 1 4 Pre_scale_Samp [2] $end
$var wire 1 5 Pre_scale_Samp [1] $end
$var wire 1 6 Pre_scale_Samp [0] $end
$var wire 1 M dat_samp_en $end
$var wire 1 ; CLK $end
$var wire 1 : RST $end
$var wire 1 7 RX_IN $end
$var reg 1 e Sampled_Bit $end
$var reg 4 f edge_cnt_Samp [3:0] $end
$var reg 3 g Samp_Reg [2:0] $end
$var reg 1 h Sampled_Bit_Comb $end
$upscope $end
$scope module DSERIALIZER_UART_RX $end
$var parameter 32 i Number_Edges $end
$var parameter 32 j DATA_WIDTH $end
$var parameter 1 k ONE $end
$var parameter 1 l ZERO $end
$var wire 1 B Deser_EN $end
$var wire 1 ; CLK $end
$var wire 1 : RST $end
$var wire 1 C Sampled_Bit_Deser $end
$var wire 1 I Edge_count [3] $end
$var wire 1 J Edge_count [2] $end
$var wire 1 K Edge_count [1] $end
$var wire 1 L Edge_count [0] $end
$var reg 8 m P_Data_Deser [7:0] $end
$var reg 8 n P_Data_Deser_Comb [7:0] $end
$upscope $end
$scope module COUNTER_UART_RX $end
$var parameter 32 o INPUT_WIDTH $end
$var parameter 32 p Number_Edges $end
$var parameter 32 q Number_Bits $end
$var parameter 1 r ONE $end
$var parameter 1 s ZERO $end
$var parameter 32 t Counter_width $end
$var wire 1 3 Pre_scale [3] $end
$var wire 1 4 Pre_scale [2] $end
$var wire 1 5 Pre_scale [1] $end
$var wire 1 6 Pre_scale [0] $end
$var wire 1 D Enable $end
$var wire 1 ; CLK $end
$var wire 1 : RST $end
$var reg 4 u bit_cnt [3:0] $end
$var reg 4 v edge_cnt [3:0] $end
$var wire 1 w edge_count_done $end
$upscope $end
$scope module PARITY_CHK_UART_RX $end
$var parameter 32 x DATA_WIDTH $end
$var parameter 1 y ONE $end
$var parameter 1 z ZERO $end
$var wire 1 9 PAR_TYP $end
$var wire 1 ( P_DATA_Par [7] $end
$var wire 1 ) P_DATA_Par [6] $end
$var wire 1 * P_DATA_Par [5] $end
$var wire 1 + P_DATA_Par [4] $end
$var wire 1 , P_DATA_Par [3] $end
$var wire 1 - P_DATA_Par [2] $end
$var wire 1 . P_DATA_Par [1] $end
$var wire 1 / P_DATA_Par [0] $end
$var wire 1 < PAR_CHK_EN $end
$var wire 1 ; CLK $end
$var wire 1 : RST $end
$var wire 1 C Sampled_Bit_par_chk $end
$var reg 1 { PAR_ERR $end
$var reg 1 | parity_Checker $end
$upscope $end
$scope module START_CHK_UART_RX $end
$var parameter 1 } ONE $end
$var parameter 1 ~ ZERO $end
$var wire 1 > Start_CHK_EN $end
$var wire 1 ; CLK $end
$var wire 1 : RST $end
$var wire 1 C Sampled_Bit_Start $end
$var reg 1 !! Start_Err $end
$upscope $end
$scope module END_CHK_UART_RX $end
$var parameter 1 "! ONE $end
$var parameter 1 #! ZERO $end
$var wire 1 @ End_CHK_EN $end
$var wire 1 ; CLK $end
$var wire 1 : RST $end
$var wire 1 C Sampled_Bit_End $end
$var reg 1 $! End_Err $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1!
x"
bx #
x$
0%
0&
1W
0X
0Y
0Z
0[
0\
0]
b0 ^
b1 _
0e
bx f
bx g
xh
b0 m
bx n
b0 u
b0 v
0{
x|
0!!
0$!
b100 0
b1000 1
b100000 2
b0 N
b1 O
b11 P
b10 Q
b110 R
b111 S
b101 T
b1 U
b0 V
b100 `
b100 a
b1 b
b0 c
b11 d
b100 i
b1000 j
b1 k
b0 l
b100 o
b100 p
b100 q
b1 r
b0 s
b100 t
b1000 x
b1 y
b0 z
b1 }
b0 ~
b1 "!
b0 #!
0'
0/
0.
0-
0,
0+
0*
0)
0(
0<
0=
1>
0?
0@
0A
0B
0C
0D
0H
0G
0F
0E
xL
xK
xJ
xI
0M
0w
0:
0;
x9
x6
x5
x4
x3
x8
17
$end
#4
1&
1:
#5
1%
1;
b1 ^
0W
1W
1Z
1[
1D
1M
#10
0!
b1000 #
0$
1"
0%
06
05
04
13
18
07
09
0;
0W
0Z
0[
1W
1Z
1[
0|
#15
1%
1;
xe
b1 v
xC
#20
1!
0%
17
0;
0W
0Z
0[
1W
1Z
1[
#25
1%
1;
1!!
1?
b10 v
#30
0%
0;
#35
1%
1;
b11 v
#40
0%
0;
#45
1%
1;
b100 v
#50
0!
0%
07
0;
0W
0Z
0[
1W
1Z
1[
#55
1%
1;
b101 v
#60
1!
0%
17
0;
0W
0Z
0[
1W
1Z
1[
#65
1%
1;
b110 v
#70
0%
0;
#75
1%
1;
b111 v
1w
#80
0!
0%
07
0;
0W
0Z
0[
1W
1Z
1[
#85
1%
1;
b0 v
b1 u
0w
1H
#90
0%
0;
#95
1%
1;
b1 v
#100
1!
0%
17
0;
0W
0Z
0[
1W
1Z
1[
#105
1%
1;
b10 v
#110
0%
0;
#115
1%
1;
b11 v
#120
0%
0;
#125
1%
1;
b100 v
#130
0%
0;
#135
1%
1;
b101 v
#140
0%
0;
#145
1%
1;
b110 v
#150
0%
0;
#155
1%
1;
b111 v
1w
#160
0%
0;
#165
1%
1;
b0 v
b10 u
0w
0H
1G
#170
0%
0;
#175
1%
1;
b1 v
#180
0%
0;
#185
1%
1;
b10 v
#190
0%
0;
#195
1%
1;
b11 v
#200
0%
0;
#205
1%
1;
b100 v
#210
0%
0;
#215
1%
1;
b101 v
